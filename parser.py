import re
from typing import Dict, Optional

def parse_job_message(text: str) -> Optional[Dict]:
    """
    Parse job information from a message text.
    Returns a dictionary with job details or None if no job information is found.
    """
    # Basic validation
    if not text or len(text.strip()) < 10:
        return None

    # Initialize job data
    job_data = {
        'title': None,
        'company': None,
        'salary': None,
        'requirements': None,
        'link': None,
        'source': None
    }

    # Split text into lines
    lines = text.split('\n')
    
    # First line is usually the title
    if lines:
        job_data['title'] = lines[0].strip()
    
    # Look for company name (usually after title)
    company_pattern = r'(–∫–æ–º–ø–∞–Ω–∏—è|—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å|—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å:)\s*[:]?\s*([^\n]+)'
    company_match = re.search(company_pattern, text, re.IGNORECASE)
    if company_match:
        job_data['company'] = company_match.group(2).strip()
    
    # Look for salary
    salary_pattern = r'(–∑–∞—Ä–ø–ª–∞—Ç–∞|–æ–ø–ª–∞—Ç–∞|–¥–æ—Ö–æ–¥)\s*[:]?\s*([^\n]+)'
    salary_match = re.search(salary_pattern, text, re.IGNORECASE)
    if salary_match:
        job_data['salary'] = salary_match.group(2).strip()
    
    # Look for requirements
    requirements_pattern = r'(—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è|—Ç—Ä–µ–±—É–µ—Ç—Å—è|–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è)\s*[:]?\s*([^\n]+)'
    requirements_match = re.search(requirements_pattern, text, re.IGNORECASE)
    if requirements_match:
        job_data['requirements'] = requirements_match.group(2).strip()
    
    # Look for links
    url_pattern = r'https?://[^\s<>"]+|www\.[^\s<>"]+'
    urls = re.findall(url_pattern, text)
    if urls:
        job_data['link'] = urls[0]
    
    # Set source
    job_data['source'] = 'telegram'
    
    # Return None if no title was found
    if not job_data['title']:
        return None
        
    return job_data

class JobParser:
    def __init__(self):
        # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        self.patterns = {
            'salary': r'(?i)(?:–∑–∞—Ä–ø–ª–∞—Ç–∞|–æ–ø–ª–∞—Ç–∞|–¥–æ—Ö–æ–¥|–∑–ø):\s*([^\n]+)',
            'location': r'(?i)(?:–ª–æ–∫–∞—Ü–∏—è|–º–µ—Å—Ç–æ|–≥–æ—Ä–æ–¥):\s*([^\n]+)',
            'company': r'(?i)(?:–∫–æ–º–ø–∞–Ω–∏—è|–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è):\s*([^\n]+)',
            'contact': r'(?i)(?:–∫–æ–Ω—Ç–∞–∫—Ç|—Å–≤—è–∑—å|telegram|tg):\s*([^\n]+)',
            'requirements': r'(?i)(?:—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è|–Ω–∞–≤—ã–∫–∏|—Å–∫–∏–ª–ª—ã|–æ–ø—ã—Ç):\s*([^\n]+)',
        }

    def extract_job_details(self, text: str) -> Dict[str, Optional[str]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
        """
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result = {
            'title': None,
            'company': None,
            'description': text,  # –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–∏–µ
            'salary': None,
            'location': None,
            'requirements': None,
            'contact': None
        }

        # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–µ—Ä–≤–∞—è –Ω–µ–ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)
        lines = text.split('\n')
        for line in lines:
            line = line.strip()
            if line and not line.startswith(('üîç', 'üíº', 'üìç', 'üí∞', 'üì±', '‚úâÔ∏è')):
                result['title'] = line
                break

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
        for key, pattern in self.patterns.items():
            match = re.search(pattern, text)
            if match:
                result[key] = match.group(1).strip()

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self._clean_results(result)
        
        return result

    def _clean_results(self, result: Dict[str, Optional[str]]):
        """
        –û—á–∏—â–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
        """
        for key, value in result.items():
            if value:
                # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                value = re.sub(r'\s+', ' ', value).strip()
                # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                value = re.sub(r'[^\w\s\-\.,;:@/]+', '', value).strip()
                result[key] = value

        # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
        if not result['title'] and result['description']:
            first_line = result['description'].split('\n')[0].strip()
            if len(first_line) <= 100:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∑–∞–≥–æ–ª–æ–≤–∫–∞
                result['title'] = first_line
            else:
                result['title'] = first_line[:97] + "..." 